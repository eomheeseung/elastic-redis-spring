package example.tech_merge.controller;import example.tech_merge.service.EsService;import example.tech_merge.util.ReadJson;import example.tech_merge.service.ServiceRepository;import example.tech_merge.service.ServiceTemplate;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.elasticsearch.action.get.GetResponse;import org.json.simple.JSONObject;import org.json.simple.parser.ParseException;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;import java.io.IOException;import java.util.HashMap;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;@RestController@Slf4j@RequiredArgsConstructorpublic class MainController {    private final ServiceRepository serviceRepository;    private final ServiceTemplate serviceTemplate;    private final EsService esService;    @GetMapping("redis/save1")    public String save() {        try {            serviceRepository.save();        } catch (IllegalStateException e) {            if (e.getMessage().equals("fail")) {                return "fail";            }        }        return "success";    }    @GetMapping("redis/find")    public String find() {        try {            serviceRepository.findMember("member");            return "ok";        } catch (RuntimeException e) {            return e.getMessage();        }    }    @PostMapping("redis/save2")    public String saveTemplate(@RequestBody ConcurrentHashMap<String, String> map) {        try {            serviceTemplate.save(map);            return "success";        } catch (RuntimeException e) {            return "fail";        }    }    @PostMapping("redis/find2")    public JSONObject findTemplate(@RequestBody HashMap<String, Object> map) {        String output = null;        JSONObject jsonObject = null;        try {            output = serviceTemplate.findMember(map.get("find").toString());            if (output.equals("fail")) {                throw new RuntimeException();            }            jsonObject = new JSONObject();            jsonObject.put(map.get("find").toString(), output);            return jsonObject;        } catch (RuntimeException e) {            jsonObject = new JSONObject();            jsonObject.put("error", e.getMessage());            return jsonObject;        }    }    @GetMapping("es/create/index")    public String createIndex() {        try {            esService.create();            return "success";        } catch (IOException e) {            return "fail";        }    }    @GetMapping("es/create/document")    public String createDocument() {        try {            esService.createDocument("game", "test",                    ReadJson.JsonToString("/Users/eomhuiseung/Downloads/3tech_merge/src/main/resources/test.json").toString());            return "success";        } catch (IOException | ParseException e) {            return "fail";        }    }    @PostMapping("es/read/document")    public JSONObject readDocument(@RequestBody ConcurrentHashMap<String, String> map) {        try {            return readDocumentReturnJson(map);        } catch (IOException e) {            throw new RuntimeException(e);        }    }    @PostMapping("es/update/document")    public JSONObject updateDocument(@RequestBody ConcurrentHashMap<String, String> map) {        try {            esService.updateDocument(map.get("index"), map.get("id"),                    ReadJson.JsonToString("/Users/eomhuiseung/Downloads/3tech_merge/src/main/resources/update.json"));            return readDocumentReturnJson(map);        } catch (IOException | ParseException e) {            throw new RuntimeException(e);        }    }    @PostMapping("es/delete/document")    public String deleteDocument(@RequestBody ConcurrentHashMap<String, String> map) {        try {            esService.deleteDocument(map.get("index"), map.get("id"));            return "success";        } catch (IOException e) {            return "fail";        }    }    @PostMapping("es/search/init")    public String searchInit(@RequestBody ConcurrentHashMap<String, String> map) {        try {            esService.createDocument(map.get("index"), "111",                    ReadJson.JsonToString("/Users/eomhuiseung/Downloads/3tech_merge/src/main/resources/search_test1.json").toString());            esService.createDocument(map.get("index"), "403",                    ReadJson.JsonToString("/Users/eomhuiseung/Downloads/3tech_merge/src/main/resources/search_test2.json").toString());            return "success";        } catch (IOException | ParseException e) {            return "fail";        }    }    @PostMapping("es/search/quest")    public JSONObject searchQuest(@RequestBody ConcurrentHashMap<String, String> map) {        try {            return esService.searchQuest(map.get("index"));        } catch (Exception e) {            JSONObject jsonObject = new JSONObject();            jsonObject.put("cause", "fail");            return jsonObject;        }    }    private JSONObject readDocumentReturnJson(ConcurrentHashMap<String, String> map) throws IOException {        GetResponse document = esService.getDocument(map.get("index"), map.get("id"));        Map<String, Object> sourceAsMap = document.getSourceAsMap();        JSONObject jsonObject = new JSONObject(sourceAsMap);        return jsonObject;    }}